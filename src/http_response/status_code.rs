pub enum HttpStatusCode {
    S100,
    S101,
    S200,
    S201,
    S202,
    S203,
    S204,
    S205,
    S206,
    S300,
    S301,
    S302,
    S303,
    S304,
    S305,
    S306,
    S307,
    S308,
    S400,
    S401,
    S402,
    S403,
    S404,
    S405,
    S406,
    S407,
    S408,
    S409,
    S410,
    S411,
    S412,
    S413,
    S414,
    S415,
    S416,
    S417,
    S418,
    S421,
    S422,
    S426,
    S500,
    S501,
    S502,
    S503,
    S504,
    S505,
}

impl std::fmt::Display for HttpStatusCode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::S100 => write!(f, "100 Continue\r\n"),
            Self::S101 => write!(f, "101 Switching\r\n"),
            Self::S200 => write!(f, "200 OK\r\n"),
            Self::S201 => write!(f, "201 Created\r\n"),
            Self::S202 => write!(f, "202 Accepted\r\n"),
            Self::S203 => write!(f, "203 Non-Authoritative Information\r\n"),
            Self::S204 => write!(f, "204 No Content\r\n"),
            Self::S205 => write!(f, "205 Reset Content\r\n"),
            Self::S206 => write!(f, "206 Partial Content\r\n"),
            Self::S300 => write!(f, "300 Multiple Choices\r\n"),
            Self::S301 => write!(f, "301 Moved Permanently\r\n"),
            Self::S302 => write!(f, "302 Found\r\n"),
            Self::S303 => write!(f, "303 See Other\r\n"),
            Self::S304 => write!(f, "304 Not Modified\r\n"),
            Self::S305 => write!(f, "305 Use Proxy\r\n"),
            Self::S306 => write!(f, "306 (Unused\r\n)"),
            Self::S307 => write!(f, "307 Temporary Redirect\r\n"),
            Self::S308 => write!(f, "308 Permanent Redirect\r\n"),
            Self::S400 => write!(f, "400 Bad Request\r\n"),
            Self::S401 => write!(f, "401 Unauthorized\r\n"),
            Self::S402 => write!(f, "402 Payment Required\r\n"),
            Self::S403 => write!(f, "403 Forbidden\r\n"),
            Self::S404 => write!(f, "404 Not Found\r\n"),
            Self::S405 => write!(f, "405 Method Not Allowed\r\n"),
            Self::S406 => write!(f, "406 Not Acceptable\r\n"),
            Self::S407 => write!(f, "407 Proxy Authentication Required\r\n"),
            Self::S408 => write!(f, "408 Request Timeout\r\n"),
            Self::S409 => write!(f, "409 Conflict \r\n"),
            Self::S410 => write!(f, "410 Gone \r\n"),
            Self::S411 => write!(f, "411 Length Required \r\n"),
            Self::S412 => write!(f, "412 Precondition Failed \r\n"),
            Self::S413 => write!(f, "413 Content Too Large \r\n"),
            Self::S414 => write!(f, "414 URI Too Long \r\n"),
            Self::S415 => write!(f, "415 Unsupported Media Type \r\n"),
            Self::S416 => write!(f, "416 Range Not Satisfiable \r\n"),
            Self::S417 => write!(f, "417 Expectation Failed \r\n"),
            Self::S418 => write!(f, "418 (Unused) \r\n"),
            Self::S421 => write!(f, "421 Misdirected Request \r\n"),
            Self::S422 => write!(f, "422 Unprocessable Content \r\n"),
            Self::S426 => write!(f, "426 Upgrade Required \r\n"),
            Self::S500 => write!(f, "500 Internal Server Error\r\n"),
            Self::S501 => write!(f, "501 Not Implemented\r\n"),
            Self::S502 => write!(f, "502 Bad Gateway\r\n"),
            Self::S503 => write!(f, "503 Service Unavailable\r\n"),
            Self::S504 => write!(f, "504 Gateway Timeout\r\n"),
            Self::S505 => write!(f, "505 HTTP Version Not Supported\r\n"),
        }
    }
}
